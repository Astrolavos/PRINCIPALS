"""
Backend Server to manage kubernetes cluster for Ops5g
"""


from code import interact
from collections import defaultdict
import base64
import json
import glob
from flask.templating import render_template
from tqdm import tqdm
from flask import Flask, request
import os.path
from typing import Dict, Any
from threading import Thread
from multiprocessing import Pool
from typing import Callable, List, Dict, Any
import kubevirt
import subprocess
app = Flask(__name__)


@app.route("/")
def home():
    """
    Renders the home page.
    """
    return render_template("search.html")

@app.route("/run_command", methods=["POST"])
def runCommand():
    """
    Returns filenames for all of the malware binaries whose functions can be searched.
    """
    source = request.form.get("source")
    dest = request.form.get("dest")
    print(f"Going to create monitor for {source} and {dest}")
    return json.dumps({})

@app.route("/delete_node", methods=["POST"])
def delete_node():
    """
    Deletes a node in the kubernetes cluster
    """
    # TODO: make sure to delete any dependent monitoring and mitm
    label = request.form.get("label")
    category = request.form.get("category")
    # nodes_to_delete = kubevirt.get_matching_nodes(node_label)
    # for node in nodes_to_delete:
    # print(f"Deleting node {node}")
    kubevirt.delete_node(label, category)
    return json.dumps([label])

@app.route("/get_nodes", methods=["GET"])
def get_nodes():
    """
    Gets details on the nodes in the kubernetes cluster
    """
    nodes = kubevirt.get_nodes(force_update=True)
    return json.dumps(nodes)

@app.route("/set_node_details", methods=["POST"])
def set_node_details():
    pod_name = request.json.get("pod_name")
    pod_settings = request.json['pod_settings']
    kubevirt.set_pod_details(pod_name, pod_settings)
    return json.dumps({})

@app.route("/get_node_details", methods=["POST"])
def get_node_details():
    """
    Gets details on the nodes in the kubernetes cluster
    """
    pod_name = request.form.get("pod_name")
    details = kubevirt.get_pod_details(pod_name)
    return json.dumps(details)


@app.route("/create_vm", methods=["POST"])
def create_vm():
    """
    Creates a node in the kubernetes cluster
    """
    node_label = request.form.get("node_label")
    sample_path = request.form.get("sample_path")
    rc = kubevirt.create_vm(node_label, sample_path)
    if rc != 0:
        return json.dumps({"error": "Script failed to run"})
    return json.dumps({})

@app.route("/create_monitor", methods=["POST"])
def create_monitor():
    """
    Creates a node in the kubernetes cluster
    """
    node_label = request.form.get("node_label")
    rc = kubevirt.create_monitor(node_label)
    if rc != 0:
        return json.dumps({"error": "Script failed to run"})
    return json.dumps({})

@app.route("/monitor_vm", methods=["POST"])
def monitor_vm():
    """
    Creates a node in the kubernetes cluster
    """
    vm_pod_name = request.form.get("vm_pod_name")
    monitor_pod_name = request.form.get("monitor_pod_name")
    rc = kubevirt.connect_monitor_to_vm(vm_pod_name, monitor_pod_name);
    if rc != 0:
        return json.dumps({"error": "Script failed to run"})
    return json.dumps({})


@app.route("/create_mitm", methods=["POST"])
def create_mitm():
    """
    Creates a MITM node in the kubernetes cluster
    """
    pod_name = request.form.get("pod_name")
    mitm_name = request.form.get("mitm_name")
    dga_fake_c2 = request.form.get("dga_fake_c2")
    rc = kubevirt.create_mitm(mitm_name, pod_name, dga_fake_c2)
    if rc != 0:
        return json.dumps({"error": "Script failed to run"})
    return json.dumps({})

@app.route("/update_traffic", methods=["GET"])
def update_traffic():
    malicious_domains = kubevirt.update_traffic()

    for detector_pod, detected_domains in malicious_domains.items():
        if len(detected_domains) > 0 and kubevirt.is_auto_quarantine_set(detector_pod):
           # Time to start auto-quarantine!!!!
            kubevirt.quarantine(detector_pod, {x['src_ip'] for x in detected_domains})
    return json.dumps({})

@app.route("/get_monitor_traffic", methods=["POST"])
def get_monitor_traffic():
    """
    Creates a node in the kubernetes cluster
    """
    pod_name = request.form.get("pod_name")
    should_update_traffic = request.form.get("update_traffic_files")
    filter_benign=request.form.get("only_malicious") is not None

    # Ignore this while we have another process updating the files continuously
    # if should_update_traffic:
    #     kubevirt.copy_traffic_file(pod_name, wait=True)

    if request.form.get("show_raw_dns") is not None:
        return json.dumps(kubevirt.pull_raw(pod_name))

    results = kubevirt.pull_domains(pod_name, filter_benign=filter_benign)

    if results is None:
        return json.dumps({"error": "Script failed to run"})
    print(f"Got {len(results)}")
    if filter_benign:
        results = "\n".join(sorted([f"{x['domain']} <- {x['src_ip']}" for x in results]))
    else:
        results = "\n".join(sorted({x['domain'] for x in results}))
    return json.dumps(results)




if __name__ == "__main__":
    app.run(debug=True, port=5002)
